 Day 18 â€“ 4-bit Asynchronous (Ripple) Counter
ðŸ“˜ Overview
Today I implemented a **4-bit asynchronous counter** in Verilog.  
Unlike synchronous counters, asynchronous counters toggle each flip-flop on the **output of the previous flip-flop**, making them slower but simple to design.

ðŸ“‚ Files
- `design.sv` â€“ RTL for 4-bit ripple counter  
- `testbench.sv` â€“ Testbench with clock & reset  
- `async_counter.vcd` â€“ Waveform output  

Simulation
1. Clock toggles every 10ns  
2. Reset applied at start  
3. Counter increments on falling edges  

ðŸ“Š Waveform
- Bit `q[0]` toggles fastest  
- Bit `q[3]` toggles slowest  
- Binary sequence: 0000 â†’ 0001 â†’ 0010 â†’ 0011 â€¦ up to 1111 â†’ repeat  
